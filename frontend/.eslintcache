[{"C:\\Users\\sudhisin\\eclipse-workspace\\unicCBT\\frontend\\src\\index.js":"1","C:\\Users\\sudhisin\\eclipse-workspace\\unicCBT\\frontend\\src\\reportWebVitals.js":"2","C:\\Users\\sudhisin\\eclipse-workspace\\unicCBT\\frontend\\src\\buttonsGroup\\buttonsGroup.js":"3","C:\\Users\\sudhisin\\eclipse-workspace\\unicCBT\\frontend\\src\\Objective.js":"4","C:\\Users\\sudhisin\\eclipse-workspace\\unicCBT\\frontend\\src\\Questions.js":"5","C:\\Users\\sudhisin\\eclipse-workspace\\unicCBT\\frontend\\src\\footer\\footer.js":"6","C:\\Users\\sudhisin\\eclipse-workspace\\unicCBT\\frontend\\src\\header\\header.js":"7"},{"size":517,"mtime":1609687315453,"results":"8","hashOfConfig":"9"},{"size":375,"mtime":1609687315458,"results":"10","hashOfConfig":"9"},{"size":9046,"mtime":1609687315447,"results":"11","hashOfConfig":"9"},{"size":2690,"mtime":1609687315426,"results":"12","hashOfConfig":"9"},{"size":16610,"mtime":1609687315444,"results":"13","hashOfConfig":"9"},{"size":581,"mtime":1609687315449,"results":"14","hashOfConfig":"9"},{"size":1903,"mtime":1609687315451,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"113n152",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\sudhisin\\eclipse-workspace\\unicCBT\\frontend\\src\\index.js",[],["32","33"],"C:\\Users\\sudhisin\\eclipse-workspace\\unicCBT\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\sudhisin\\eclipse-workspace\\unicCBT\\frontend\\src\\buttonsGroup\\buttonsGroup.js",["34","35","36","37","38","39","40","41","42","43","44","45","46"],"import React, { useState, useEffect } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Card from '@material-ui/core/Card';\r\nimport Button from '@material-ui/core/Button';\r\nimport classNames from 'classnames';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Brightness1Icon from '@material-ui/icons/Brightness1';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1\r\n    },\r\n    header: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        height: 50,\r\n        width: '100%',\r\n        paddingLeft: theme.spacing.unit * 5,\r\n        marginBottom: 20,\r\n        backgroundColor: theme.palette.background.default,\r\n    },\r\n    leftContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'column'\r\n    },\r\n\r\n    card: {\r\n        margin: '10px',\r\n        // backgroundColor: 'rgb(0,0,0,0.2)',\r\n    },\r\n    container: {\r\n        overflow: 'auto'\r\n    },\r\n    appbar: {\r\n        alignItems: 'center'\r\n    },\r\n\r\n    buttonDefault: {\r\n        margin: '12px',\r\n        borderRadius: '50%',\r\n        padding: '14px 0px',\r\n        backgroundColor: '#fff',\r\n        color: 'black',\r\n        \"&:hover\": {\r\n            backgroundColor: '#ccc',\r\n        }\r\n    },\r\n    answeredColor: {\r\n        // margin: '12px',\r\n        borderRadius: '50%',\r\n        padding: '14px 0px',\r\n        backgroundColor: '#8bb58b',\r\n        color: '#fff',\r\n        \"&:hover\": {\r\n            backgroundColor: '#8bb58b',\r\n        }\r\n    },\r\n\r\n    reviewAnsweredColor: {\r\n        margin: '12px',\r\n        borderRadius: '50%',\r\n        padding: '14px 0px',\r\n        backgroundColor: 'red',\r\n        color: '#fff',\r\n        \"&:hover\": {\r\n            backgroundColor: 'red',\r\n        }\r\n    },\r\n    reviewUnAnsweredColor: {\r\n        margin: '12px',\r\n        borderRadius: '50%',\r\n        padding: '14px 0px',\r\n        backgroundColor: 'rgb(239 180 180)',\r\n        color: '#fff',\r\n        \"&:hover\": {\r\n            backgroundColor: '#rgb(239 180 180)',\r\n        }\r\n    },\r\n    unansweredColor: {\r\n        margin: '12px',\r\n        borderRadius: '50%',\r\n        padding: '14px 0px',\r\n        backgroundColor: 'red',\r\n        color: '#fff',\r\n        \"&:hover\": {\r\n            backgroundColor: 'red',\r\n        }\r\n    },\r\n\r\n    buttonContainer: {\r\n        display: 'flex',\r\n        width: 'calc(100% - 17%)',\r\n        flexDirection: 'row',\r\n        flexWrap: 'wrap',\r\n        marginLeft: '44px',\r\n        maxHeight: '600px',\r\n        overflowY: 'scroll',\r\n        boxShadow: '0px 4px 13px -1px rgba(0,0,0,0.2), 0px 1px 10px 0px rgba(0,0,0,0.14), 0px 1px 20px 0px rgba(0,0,0,0.19)',\r\n        borderRadius: '4px',\r\n        border: '2px solid  rgba(0,0,0,0.2)',\r\n        padding: '11px',\r\n        \"& button\": {\r\n            margin: '5px',\r\n\r\n            minWidth: '50px'\r\n        }\r\n    },\r\n    legendContainer: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        width: '100%'\r\n    },\r\n    legends: {\r\n        alignItems: 'center',\r\n        display: 'flex',\r\n        height: '40px',\r\n        boxShadow: '0px 4px 13px -1px rgba(0,0,0,0.2), 0px 1px 10px 0px rgba(0,0,0,0.14), 0px 1px 20px 0px rgba(0,0,0,0.19)',\r\n        borderRadius: '7px',\r\n        margin: '4px'\r\n\r\n    }\r\n}));\r\n\r\n\r\nfunction ButtonsGroup({ arrLen, questionInfo }) {\r\n\r\n\r\n    console.log(arrLen, questionInfo);\r\n\r\n    useEffect(() => {\r\n        console.log(\"useEffect\");\r\n        let tempArr = [];\r\n        if (questionInfo.id === \"\") {\r\n            const createArr = () => {\r\n                for (let i = 0; i < arrLen; i++) {\r\n                    let obj = {};\r\n                    obj['answered'] = false;\r\n                    obj['default'] = true;\r\n                    obj['unanswered'] = false;\r\n                    obj['reviewA'] = false;\r\n                    obj['reviewU'] = false;\r\n                    obj['id'] = i + 1;\r\n                    tempArr.push(obj);\r\n\r\n                }\r\n                setnewArr([...newArr, ...tempArr]);\r\n                console.log(\"newArr123\", newArr)\r\n            }\r\n            createArr();\r\n        } else {\r\n            updateButtons(questionInfo);\r\n        }\r\n\r\n\r\n    }, [questionInfo]);\r\n\r\n\r\n\r\n    const updateButtons = (questionInfo) => {\r\n        let obj = {};\r\n        // for (let i = 0; i < newArr.length; i++) {\r\n        //     if (newArr[i]['id'] == id) {\r\n\r\n        //         obj['answered'] = true;\r\n        //         obj['unanswered'] = false;\r\n        //         obj['review'] = false;\r\n        //         obj['id'] = id;\r\n\r\n        //     }\r\n\r\n        //     // tempArr.push(obj);\r\n\r\n        // }\r\n        setnewArr(state => {\r\n            console.log(\"state\", state);\r\n            const newArr = state.map(item => {\r\n                if (item.id == questionInfo.id) {\r\n                    item.answered = false;\r\n                    item.default = false;\r\n                    item.unanswered = false;\r\n                    item.reviewA = false;\r\n                    item.reviewU = false;\r\n                    item[questionInfo.type] = true;\r\n                    item['id'] = questionInfo.id;\r\n\r\n                }\r\n                return item;\r\n            })\r\n            return newArr;\r\n        })\r\n        // setnewArr([...newArr, obj]);\r\n    };\r\n\r\n    const classes = useStyles();\r\n    const [itemClicked, setitemClicked] = useState(-1);\r\n    const [answersCount, setanswersCount] = useState({ unanswered: 0, answered: 0, reviewA: 0, reviewU: 0 });\r\n    const [newArr, setnewArr] = useState([]);\r\n\r\n\r\n\r\n    const [isAnsweredColor, setisAnsweredColor] = useState(false);\r\n    // if (id !== undefined) {\r\n    //     updateButtons(id);\r\n    // }\r\n\r\n    console.log(\"newArr\", newArr);\r\n\r\n    const clicked = (val) => {\r\n        let clickedVal = parseInt(val.target.innerText.trim() - 1);\r\n        setitemClicked(clickedVal);\r\n    }\r\n    return (\r\n        <>\r\n            {/* <Grid container className={classes.container}> */}\r\n\r\n            {/* <Grid item xs={12} md={4} lg={3}> */}\r\n            {/* <Card className={classes.card}>\r\n                        {\r\n                            newArr.map((val, key) => {\r\n                                console.log(val, key);\r\n                                return (<Button key={key} className={classNames({ [classes.buttonDefault]: (itemClicked === key ? false : true), [classes.answeredColor]: (itemClicked === key ? true : false) })} onClick={(val) => clicked(val)} variant=\"contained\" color=\"primary\">\r\n                                    {val.value}\r\n                                </Button>)\r\n                            })\r\n                        }\r\n                    </Card> */}\r\n            <div className={classes.legendContainer}>\r\n                <div className={classes.legends} style={{ width: '50%' }}>\r\n                    <Brightness1Icon style={{ color: 'green' }} />\r\n                    <span> Answered Questions</span>\r\n                </div>\r\n                <div className={classes.legends} style={{ width: '44%' }}>\r\n                    <Brightness1Icon style={{ color: 'red' }} />\r\n                    <span> Unanswered Questions</span>\r\n                </div>\r\n                <div className={classes.legends} style={{ width: '50%' }}>\r\n                    <Brightness1Icon style={{ color: 'red' }} />\r\n                    <span> Review Answered Question</span>\r\n                </div>\r\n                <div className={classes.legends} style={{ width: '50%' }}>\r\n                    <Brightness1Icon style={{ color: 'rgb(239 180 180)' }} />\r\n                    <span> Review Unanswered Question</span>\r\n                </div>\r\n\r\n            </div>\r\n\r\n\r\n\r\n            <div style={{ width: '100%' }}>\r\n                <h3>Question Numbers</h3>\r\n            </div>\r\n            <div className={classes.buttonContainer}>\r\n\r\n\r\n                <br />\r\n                {/* <Card className={classes.card}> */}\r\n                {\r\n                    newArr.map((val, key) => {\r\n                        // console.log(val, key);\r\n                        return (\r\n                            <Button key={key} className={classNames({\r\n                                [classes.buttonDefault]: (val.default === true ? true : false),\r\n                                [classes.unansweredColor]: (val.unanswered === true ? true : false),\r\n                                [classes.answeredColor]: (val.answered === true ? true : false),\r\n                                [classes.reviewAnsweredColor]: (val.reviewA === true ? true : false),\r\n                                [classes.reviewUnAnsweredColor]: (val.reviewU === true ? true : false)\r\n                            })} variant=\"contained\" color=\"primary\">\r\n                                {key + 1}\r\n                            </Button>)\r\n                    })\r\n                }\r\n                {/* </Card> */}\r\n            </div>\r\n\r\n\r\n\r\n            {/* </Grid> */}\r\n            {/* </Grid> */}\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ButtonsGroup\r\n","C:\\Users\\sudhisin\\eclipse-workspace\\unicCBT\\frontend\\src\\Objective.js",[],"C:\\Users\\sudhisin\\eclipse-workspace\\unicCBT\\frontend\\src\\Questions.js",[],"C:\\Users\\sudhisin\\eclipse-workspace\\unicCBT\\frontend\\src\\footer\\footer.js",[],"C:\\Users\\sudhisin\\eclipse-workspace\\unicCBT\\frontend\\src\\header\\header.js",[],{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":2,"column":8,"nodeType":"53","messageId":"54","endLine":2,"endColumn":12},{"ruleId":"51","severity":1,"message":"55","line":3,"column":8,"nodeType":"53","messageId":"54","endLine":3,"endColumn":12},{"ruleId":"51","severity":1,"message":"56","line":8,"column":8,"nodeType":"53","messageId":"54","endLine":8,"endColumn":18},{"ruleId":"51","severity":1,"message":"57","line":9,"column":8,"nodeType":"53","messageId":"54","endLine":9,"endColumn":13},{"ruleId":"58","severity":1,"message":"59","line":158,"column":8,"nodeType":"60","endLine":158,"endColumn":22,"suggestions":"61"},{"ruleId":"51","severity":1,"message":"62","line":163,"column":13,"nodeType":"53","messageId":"54","endLine":163,"endColumn":16},{"ruleId":"63","severity":1,"message":"64","line":180,"column":29,"nodeType":"65","messageId":"66","endLine":180,"endColumn":31},{"ruleId":"51","severity":1,"message":"67","line":198,"column":12,"nodeType":"53","messageId":"54","endLine":198,"endColumn":23},{"ruleId":"51","severity":1,"message":"68","line":199,"column":12,"nodeType":"53","messageId":"54","endLine":199,"endColumn":24},{"ruleId":"51","severity":1,"message":"69","line":199,"column":26,"nodeType":"53","messageId":"54","endLine":199,"endColumn":41},{"ruleId":"51","severity":1,"message":"70","line":204,"column":12,"nodeType":"53","messageId":"54","endLine":204,"endColumn":27},{"ruleId":"51","severity":1,"message":"71","line":204,"column":29,"nodeType":"53","messageId":"54","endLine":204,"endColumn":47},{"ruleId":"51","severity":1,"message":"72","line":211,"column":11,"nodeType":"53","messageId":"54","endLine":211,"endColumn":18},"no-native-reassign",["73"],"no-negated-in-lhs",["74"],"no-unused-vars","'Grid' is defined but never used.","Identifier","unusedVar","'Card' is defined but never used.","'Typography' is defined but never used.","'Paper' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'arrLen' and 'newArr'. Either include them or remove the dependency array. You can also do a functional update 'setnewArr(n => ...)' if you only need 'newArr' in the 'setnewArr' call.","ArrayExpression",["75"],"'obj' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'itemClicked' is assigned a value but never used.","'answersCount' is assigned a value but never used.","'setanswersCount' is assigned a value but never used.","'isAnsweredColor' is assigned a value but never used.","'setisAnsweredColor' is assigned a value but never used.","'clicked' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"76","fix":"77"},"Update the dependencies array to be: [arrLen, newArr, questionInfo]",{"range":"78","text":"79"},[4229,4243],"[arrLen, newArr, questionInfo]"]