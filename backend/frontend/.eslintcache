[{"C:\\Users\\sudhisin\\eclipse-workspace\\unicCBT\\backend\\frontend\\src\\index.js":"1","C:\\Users\\sudhisin\\eclipse-workspace\\unicCBT\\backend\\frontend\\src\\buttonsGroup\\buttonsGroup.js":"2","C:\\Users\\sudhisin\\eclipse-workspace\\unicCBT\\backend\\frontend\\src\\Questions.js":"3","C:\\Users\\sudhisin\\eclipse-workspace\\unicCBT\\backend\\frontend\\src\\Test.js":"4","C:\\Users\\sudhisin\\eclipse-workspace\\unicCBT\\backend\\frontend\\src\\instructions\\instructions.js":"5","C:\\Users\\sudhisin\\eclipse-workspace\\unicCBT\\backend\\frontend\\src\\Objective.js":"6","C:\\Users\\sudhisin\\eclipse-workspace\\unicCBT\\backend\\frontend\\src\\login\\login.js":"7","C:\\Users\\sudhisin\\eclipse-workspace\\unicCBT\\backend\\frontend\\src\\header\\header.js":"8"},{"size":517,"mtime":1609687315453,"results":"9","hashOfConfig":"10"},{"size":9046,"mtime":1609687315447,"results":"11","hashOfConfig":"10"},{"size":16610,"mtime":1609687315444,"results":"12","hashOfConfig":"10"},{"size":7291,"mtime":1609687315446,"results":"13","hashOfConfig":"10"},{"size":5184,"mtime":1609687315454,"results":"14","hashOfConfig":"10"},{"size":2690,"mtime":1609687315426,"results":"15","hashOfConfig":"10"},{"size":5286,"mtime":1609687315455,"results":"16","hashOfConfig":"10"},{"size":1903,"mtime":1609687315451,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"o903ls",{"filePath":"21","messages":"22","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\sudhisin\\eclipse-workspace\\unicCBT\\backend\\frontend\\src\\index.js",[],["39","40"],"C:\\Users\\sudhisin\\eclipse-workspace\\unicCBT\\backend\\frontend\\src\\buttonsGroup\\buttonsGroup.js",["41","42","43","44","45","46","47","48","49","50","51","52","53"],"import React, { useState, useEffect } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Card from '@material-ui/core/Card';\r\nimport Button from '@material-ui/core/Button';\r\nimport classNames from 'classnames';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Brightness1Icon from '@material-ui/icons/Brightness1';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1\r\n    },\r\n    header: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        height: 50,\r\n        width: '100%',\r\n        paddingLeft: theme.spacing.unit * 5,\r\n        marginBottom: 20,\r\n        backgroundColor: theme.palette.background.default,\r\n    },\r\n    leftContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'column'\r\n    },\r\n\r\n    card: {\r\n        margin: '10px',\r\n        // backgroundColor: 'rgb(0,0,0,0.2)',\r\n    },\r\n    container: {\r\n        overflow: 'auto'\r\n    },\r\n    appbar: {\r\n        alignItems: 'center'\r\n    },\r\n\r\n    buttonDefault: {\r\n        margin: '12px',\r\n        borderRadius: '50%',\r\n        padding: '14px 0px',\r\n        backgroundColor: '#fff',\r\n        color: 'black',\r\n        \"&:hover\": {\r\n            backgroundColor: '#ccc',\r\n        }\r\n    },\r\n    answeredColor: {\r\n        // margin: '12px',\r\n        borderRadius: '50%',\r\n        padding: '14px 0px',\r\n        backgroundColor: '#8bb58b',\r\n        color: '#fff',\r\n        \"&:hover\": {\r\n            backgroundColor: '#8bb58b',\r\n        }\r\n    },\r\n\r\n    reviewAnsweredColor: {\r\n        margin: '12px',\r\n        borderRadius: '50%',\r\n        padding: '14px 0px',\r\n        backgroundColor: 'red',\r\n        color: '#fff',\r\n        \"&:hover\": {\r\n            backgroundColor: 'red',\r\n        }\r\n    },\r\n    reviewUnAnsweredColor: {\r\n        margin: '12px',\r\n        borderRadius: '50%',\r\n        padding: '14px 0px',\r\n        backgroundColor: 'rgb(239 180 180)',\r\n        color: '#fff',\r\n        \"&:hover\": {\r\n            backgroundColor: '#rgb(239 180 180)',\r\n        }\r\n    },\r\n    unansweredColor: {\r\n        margin: '12px',\r\n        borderRadius: '50%',\r\n        padding: '14px 0px',\r\n        backgroundColor: 'red',\r\n        color: '#fff',\r\n        \"&:hover\": {\r\n            backgroundColor: 'red',\r\n        }\r\n    },\r\n\r\n    buttonContainer: {\r\n        display: 'flex',\r\n        width: 'calc(100% - 17%)',\r\n        flexDirection: 'row',\r\n        flexWrap: 'wrap',\r\n        marginLeft: '44px',\r\n        maxHeight: '600px',\r\n        overflowY: 'scroll',\r\n        boxShadow: '0px 4px 13px -1px rgba(0,0,0,0.2), 0px 1px 10px 0px rgba(0,0,0,0.14), 0px 1px 20px 0px rgba(0,0,0,0.19)',\r\n        borderRadius: '4px',\r\n        border: '2px solid  rgba(0,0,0,0.2)',\r\n        padding: '11px',\r\n        \"& button\": {\r\n            margin: '5px',\r\n\r\n            minWidth: '50px'\r\n        }\r\n    },\r\n    legendContainer: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        width: '100%'\r\n    },\r\n    legends: {\r\n        alignItems: 'center',\r\n        display: 'flex',\r\n        height: '40px',\r\n        boxShadow: '0px 4px 13px -1px rgba(0,0,0,0.2), 0px 1px 10px 0px rgba(0,0,0,0.14), 0px 1px 20px 0px rgba(0,0,0,0.19)',\r\n        borderRadius: '7px',\r\n        margin: '4px'\r\n\r\n    }\r\n}));\r\n\r\n\r\nfunction ButtonsGroup({ arrLen, questionInfo }) {\r\n\r\n\r\n    console.log(arrLen, questionInfo);\r\n\r\n    useEffect(() => {\r\n        console.log(\"useEffect\");\r\n        let tempArr = [];\r\n        if (questionInfo.id === \"\") {\r\n            const createArr = () => {\r\n                for (let i = 0; i < arrLen; i++) {\r\n                    let obj = {};\r\n                    obj['answered'] = false;\r\n                    obj['default'] = true;\r\n                    obj['unanswered'] = false;\r\n                    obj['reviewA'] = false;\r\n                    obj['reviewU'] = false;\r\n                    obj['id'] = i + 1;\r\n                    tempArr.push(obj);\r\n\r\n                }\r\n                setnewArr([...newArr, ...tempArr]);\r\n                console.log(\"newArr123\", newArr)\r\n            }\r\n            createArr();\r\n        } else {\r\n            updateButtons(questionInfo);\r\n        }\r\n\r\n\r\n    }, [questionInfo]);\r\n\r\n\r\n\r\n    const updateButtons = (questionInfo) => {\r\n        let obj = {};\r\n        // for (let i = 0; i < newArr.length; i++) {\r\n        //     if (newArr[i]['id'] == id) {\r\n\r\n        //         obj['answered'] = true;\r\n        //         obj['unanswered'] = false;\r\n        //         obj['review'] = false;\r\n        //         obj['id'] = id;\r\n\r\n        //     }\r\n\r\n        //     // tempArr.push(obj);\r\n\r\n        // }\r\n        setnewArr(state => {\r\n            console.log(\"state\", state);\r\n            const newArr = state.map(item => {\r\n                if (item.id == questionInfo.id) {\r\n                    item.answered = false;\r\n                    item.default = false;\r\n                    item.unanswered = false;\r\n                    item.reviewA = false;\r\n                    item.reviewU = false;\r\n                    item[questionInfo.type] = true;\r\n                    item['id'] = questionInfo.id;\r\n\r\n                }\r\n                return item;\r\n            })\r\n            return newArr;\r\n        })\r\n        // setnewArr([...newArr, obj]);\r\n    };\r\n\r\n    const classes = useStyles();\r\n    const [itemClicked, setitemClicked] = useState(-1);\r\n    const [answersCount, setanswersCount] = useState({ unanswered: 0, answered: 0, reviewA: 0, reviewU: 0 });\r\n    const [newArr, setnewArr] = useState([]);\r\n\r\n\r\n\r\n    const [isAnsweredColor, setisAnsweredColor] = useState(false);\r\n    // if (id !== undefined) {\r\n    //     updateButtons(id);\r\n    // }\r\n\r\n    console.log(\"newArr\", newArr);\r\n\r\n    const clicked = (val) => {\r\n        let clickedVal = parseInt(val.target.innerText.trim() - 1);\r\n        setitemClicked(clickedVal);\r\n    }\r\n    return (\r\n        <>\r\n            {/* <Grid container className={classes.container}> */}\r\n\r\n            {/* <Grid item xs={12} md={4} lg={3}> */}\r\n            {/* <Card className={classes.card}>\r\n                        {\r\n                            newArr.map((val, key) => {\r\n                                console.log(val, key);\r\n                                return (<Button key={key} className={classNames({ [classes.buttonDefault]: (itemClicked === key ? false : true), [classes.answeredColor]: (itemClicked === key ? true : false) })} onClick={(val) => clicked(val)} variant=\"contained\" color=\"primary\">\r\n                                    {val.value}\r\n                                </Button>)\r\n                            })\r\n                        }\r\n                    </Card> */}\r\n            <div className={classes.legendContainer}>\r\n                <div className={classes.legends} style={{ width: '50%' }}>\r\n                    <Brightness1Icon style={{ color: 'green' }} />\r\n                    <span> Answered Questions</span>\r\n                </div>\r\n                <div className={classes.legends} style={{ width: '44%' }}>\r\n                    <Brightness1Icon style={{ color: 'red' }} />\r\n                    <span> Unanswered Questions</span>\r\n                </div>\r\n                <div className={classes.legends} style={{ width: '50%' }}>\r\n                    <Brightness1Icon style={{ color: 'red' }} />\r\n                    <span> Review Answered Question</span>\r\n                </div>\r\n                <div className={classes.legends} style={{ width: '50%' }}>\r\n                    <Brightness1Icon style={{ color: 'rgb(239 180 180)' }} />\r\n                    <span> Review Unanswered Question</span>\r\n                </div>\r\n\r\n            </div>\r\n\r\n\r\n\r\n            <div style={{ width: '100%' }}>\r\n                <h3>Question Numbers</h3>\r\n            </div>\r\n            <div className={classes.buttonContainer}>\r\n\r\n\r\n                <br />\r\n                {/* <Card className={classes.card}> */}\r\n                {\r\n                    newArr.map((val, key) => {\r\n                        // console.log(val, key);\r\n                        return (\r\n                            <Button key={key} className={classNames({\r\n                                [classes.buttonDefault]: (val.default === true ? true : false),\r\n                                [classes.unansweredColor]: (val.unanswered === true ? true : false),\r\n                                [classes.answeredColor]: (val.answered === true ? true : false),\r\n                                [classes.reviewAnsweredColor]: (val.reviewA === true ? true : false),\r\n                                [classes.reviewUnAnsweredColor]: (val.reviewU === true ? true : false)\r\n                            })} variant=\"contained\" color=\"primary\">\r\n                                {key + 1}\r\n                            </Button>)\r\n                    })\r\n                }\r\n                {/* </Card> */}\r\n            </div>\r\n\r\n\r\n\r\n            {/* </Grid> */}\r\n            {/* </Grid> */}\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ButtonsGroup\r\n","C:\\Users\\sudhisin\\eclipse-workspace\\unicCBT\\backend\\frontend\\src\\Questions.js",[],"C:\\Users\\sudhisin\\eclipse-workspace\\unicCBT\\backend\\frontend\\src\\Test.js",["54","55","56","57","58","59","60","61","62","63","64","65","66"],"C:\\Users\\sudhisin\\eclipse-workspace\\unicCBT\\backend\\frontend\\src\\instructions\\instructions.js",["67","68","69","70"],"import React, { useState } from 'react'\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Typography } from '@material-ui/core';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ButtonsGroup from '../buttonsGroup/buttonsGroup';\r\nimport Header from '../header/header';\r\n\r\n// import image from '../../public/'\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        minHeight: '40vh',\r\n        display: 'flex'\r\n    },\r\n    InstructionsDiv: {\r\n        padding: '9px',\r\n        boxShadow: '0px 3px 8px 6px #ccc',\r\n        // lineHeight: '4rem'\r\n    },\r\n    root: {\r\n        flexGrow: 1\r\n    },\r\n    img1: {\r\n        width: '100px',\r\n        height: '100px'\r\n    }\r\n}));\r\n\r\n\r\nfunction Instructions() {\r\n    const classes = useStyles();\r\n    let buttonVal = null;\r\n    const [questionId, setquestionId] = useState({ id: '', type: '' })\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Header />\r\n            <Typography variant=\"h4\" color=\"textSecondary\" align=\"left\">\r\n                Instructions\r\n            </Typography>\r\n            <ButtonsGroup arrLen={200} buttonValue={1} questionInfo={questionId} />\r\n            <Grid container>\r\n\r\n                <Grid item xs={12} md={9} >\r\n                    <button onClick={() => {\r\n                        setquestionId({ id: 1, type: 'answered' });\r\n                    }}>click me </button>\r\n                    <button onClick={() => {\r\n                        setquestionId({ id: 2, type: 'answered' });\r\n                    }}>click me </button>\r\n                    <button onClick={() => {\r\n                        setquestionId({ id: 2, type: 'review' });\r\n                    }}>Review </button>\r\n                    <button onClick={() => {\r\n\r\n                        setquestionId({ id: 2, type: 'unanswered' });\r\n                    }}>unanswered </button>\r\n                    {/* <Paper elevation={3}>\r\n                        <p className={classes.InstructionsDiv}>\r\n                            <h4>\r\n                                1. After login, the candidate shall be able to see the detailed instructions for the\r\n                                examination. Candidates are advised to go through the instructions carefully regarding the type\r\n                                of questions, marking scheme, procedure to mark & change answer etc. At the designated time\r\n                                of start of the examination, the candidates will be able to proceed and see the questions on the\r\n                                computer screen?\r\n                            </h4>\r\n                            <br />\r\n\r\n                            <h4>\r\n                                2.  After login, the candidate shall be able to see the detailed instructions for the\r\n                                examination. Candidates are advised to go through the instructions carefully regarding the type\r\n                                of questions, marking scheme, procedure to mark & change answer etc. At the designated time\r\n                                of start of the examination, the candidates will be able to proceed and see the questions on the\r\n                                computer screen?\r\n                            </h4>\r\n\r\n\r\n\r\n                            <br />\r\n                            <h4>\r\n                                3.  After login, the candidate shall be able to see the detailed instructions for the\r\n                                examination. Candidates are advised to go through the instructions carefully regarding the type\r\n                                of questions, marking scheme, procedure to mark & change answer etc. At the designated time\r\n                                of start of the examination, the candidates will be able to proceed and see the questions on the\r\n                                computer screen?\r\n                            </h4>\r\n\r\n                            <br />\r\n\r\n                            <h4>\r\n                                4.  After login, the candidate shall be able to see the detailed instructions for the\r\n                                examination. Candidates are advised to go through the instructions carefully regarding the type\r\n                                of questions, marking scheme, procedure to mark & change answer etc. At the designated time\r\n                                of start of the examination, the candidates will be able to proceed and see the questions on the\r\n                                computer screen?\r\n                            </h4>\r\n\r\n\r\n                        </p>\r\n                    </Paper> */}\r\n\r\n                </Grid>\r\n\r\n                <Grid item xs={12} md={3} >\r\n                    <Divider orientation=\"vertical\" flexItem />\r\n                    {/* <Avatar alt=\"Remy Sharp\" className={classes.img1} src=\"image1.jpg\" />\r\n                    Name: Harsh Yadav */}\r\n                </Grid>\r\n            </Grid>\r\n\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Instructions\r\n",["71","72"],"C:\\Users\\sudhisin\\eclipse-workspace\\unicCBT\\backend\\frontend\\src\\Objective.js",[],["73","74"],"C:\\Users\\sudhisin\\eclipse-workspace\\unicCBT\\backend\\frontend\\src\\login\\login.js",["75","76","77","78","79"],"C:\\Users\\sudhisin\\eclipse-workspace\\unicCBT\\backend\\frontend\\src\\header\\header.js",[],{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","severity":1,"message":"85","line":2,"column":8,"nodeType":"86","messageId":"87","endLine":2,"endColumn":12},{"ruleId":"84","severity":1,"message":"88","line":3,"column":8,"nodeType":"86","messageId":"87","endLine":3,"endColumn":12},{"ruleId":"84","severity":1,"message":"89","line":8,"column":8,"nodeType":"86","messageId":"87","endLine":8,"endColumn":18},{"ruleId":"84","severity":1,"message":"90","line":9,"column":8,"nodeType":"86","messageId":"87","endLine":9,"endColumn":13},{"ruleId":"91","severity":1,"message":"92","line":158,"column":8,"nodeType":"93","endLine":158,"endColumn":22,"suggestions":"94"},{"ruleId":"84","severity":1,"message":"95","line":163,"column":13,"nodeType":"86","messageId":"87","endLine":163,"endColumn":16},{"ruleId":"96","severity":1,"message":"97","line":180,"column":29,"nodeType":"98","messageId":"99","endLine":180,"endColumn":31},{"ruleId":"84","severity":1,"message":"100","line":198,"column":12,"nodeType":"86","messageId":"87","endLine":198,"endColumn":23},{"ruleId":"84","severity":1,"message":"101","line":199,"column":12,"nodeType":"86","messageId":"87","endLine":199,"endColumn":24},{"ruleId":"84","severity":1,"message":"102","line":199,"column":26,"nodeType":"86","messageId":"87","endLine":199,"endColumn":41},{"ruleId":"84","severity":1,"message":"103","line":204,"column":12,"nodeType":"86","messageId":"87","endLine":204,"endColumn":27},{"ruleId":"84","severity":1,"message":"104","line":204,"column":29,"nodeType":"86","messageId":"87","endLine":204,"endColumn":47},{"ruleId":"84","severity":1,"message":"105","line":211,"column":11,"nodeType":"86","messageId":"87","endLine":211,"endColumn":18},{"ruleId":"84","severity":1,"message":"106","line":1,"column":27,"nodeType":"86","messageId":"87","endLine":1,"endColumn":36},{"ruleId":"84","severity":1,"message":"88","line":3,"column":8,"nodeType":"86","messageId":"87","endLine":3,"endColumn":12},{"ruleId":"84","severity":1,"message":"107","line":5,"column":8,"nodeType":"86","messageId":"87","endLine":5,"endColumn":18},{"ruleId":"84","severity":1,"message":"108","line":8,"column":8,"nodeType":"86","messageId":"87","endLine":8,"endColumn":23},{"ruleId":"84","severity":1,"message":"109","line":14,"column":8,"nodeType":"86","messageId":"87","endLine":14,"endColumn":21},{"ruleId":"84","severity":1,"message":"110","line":15,"column":8,"nodeType":"86","messageId":"87","endLine":15,"endColumn":25},{"ruleId":"84","severity":1,"message":"111","line":16,"column":8,"nodeType":"86","messageId":"87","endLine":16,"endColumn":26},{"ruleId":"84","severity":1,"message":"112","line":118,"column":22,"nodeType":"86","messageId":"87","endLine":118,"endColumn":27},{"ruleId":"96","severity":1,"message":"97","line":134,"column":19,"nodeType":"98","messageId":"99","endLine":134,"endColumn":21},{"ruleId":"96","severity":1,"message":"97","line":140,"column":19,"nodeType":"98","messageId":"99","endLine":140,"endColumn":21},{"ruleId":"113","severity":1,"message":"114","line":153,"column":18,"nodeType":"86","messageId":"115","endLine":153,"endColumn":24},{"ruleId":"113","severity":1,"message":"114","line":172,"column":18,"nodeType":"86","messageId":"115","endLine":172,"endColumn":24},{"ruleId":"116","severity":1,"message":"117","line":204,"column":72,"nodeType":"118","endLine":204,"endColumn":94},{"ruleId":"84","severity":1,"message":"90","line":5,"column":8,"nodeType":"86","messageId":"87","endLine":5,"endColumn":13},{"ruleId":"84","severity":1,"message":"119","line":6,"column":8,"nodeType":"86","messageId":"87","endLine":6,"endColumn":14},{"ruleId":"120","severity":1,"message":"121","line":22,"column":5,"nodeType":"122","messageId":"99","endLine":22,"endColumn":9},{"ruleId":"84","severity":1,"message":"123","line":34,"column":9,"nodeType":"86","messageId":"87","endLine":34,"endColumn":18},{"ruleId":"80","replacedBy":"124"},{"ruleId":"82","replacedBy":"125"},{"ruleId":"80","replacedBy":"126"},{"ruleId":"82","replacedBy":"127"},{"ruleId":"84","severity":1,"message":"128","line":7,"column":8,"nodeType":"86","messageId":"87","endLine":7,"endColumn":16},{"ruleId":"84","severity":1,"message":"129","line":16,"column":8,"nodeType":"86","messageId":"87","endLine":16,"endColumn":14},{"ruleId":"84","severity":1,"message":"130","line":73,"column":9,"nodeType":"86","messageId":"87","endLine":73,"endColumn":17},{"ruleId":"96","severity":1,"message":"97","line":79,"column":24,"nodeType":"98","messageId":"99","endLine":79,"endColumn":26},{"ruleId":"96","severity":1,"message":"97","line":104,"column":24,"nodeType":"98","messageId":"99","endLine":104,"endColumn":26},"no-native-reassign",["131"],"no-negated-in-lhs",["132"],"no-unused-vars","'Grid' is defined but never used.","Identifier","unusedVar","'Card' is defined but never used.","'Typography' is defined but never used.","'Paper' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'arrLen' and 'newArr'. Either include them or remove the dependency array. You can also do a functional update 'setnewArr(n => ...)' if you only need 'newArr' in the 'setnewArr' call.","ArrayExpression",["133"],"'obj' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'itemClicked' is assigned a value but never used.","'answersCount' is assigned a value but never used.","'setanswersCount' is assigned a value but never used.","'isAnsweredColor' is assigned a value but never used.","'setisAnsweredColor' is assigned a value but never used.","'clicked' is assigned a value but never used.","'useEffect' is defined but never used.","'classNames' is defined but never used.","'Brightness1Icon' is defined but never used.","'MobileStepper' is defined but never used.","'KeyboardArrowLeft' is defined but never used.","'KeyboardArrowRight' is defined but never used.","'theme' is assigned a value but never used.","no-self-assign","'quesNo' is assigned to itself.","selfAssignment","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'Avatar' is defined but never used.","no-dupe-keys","Duplicate key 'root'.","ObjectExpression","'buttonVal' is assigned a value but never used.",["131"],["132"],["131"],["132"],"'Checkbox' is defined but never used.","'Header' is defined but never used.","'onSubmit' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"134","fix":"135"},"Update the dependencies array to be: [arrLen, newArr, questionInfo]",{"range":"136","text":"137"},[4229,4243],"[arrLen, newArr, questionInfo]"]