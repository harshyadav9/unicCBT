[{"C:\\Users\\admin\\eclipse-workspace\\unicCBT\\backend\\frontend\\src\\Test.js":"1","C:\\Users\\admin\\eclipse-workspace\\unicCBT\\backend\\frontend\\src\\App.js":"2","C:\\Users\\admin\\eclipse-workspace\\unicCBT\\backend\\frontend\\src\\Questions.js":"3","C:\\Users\\admin\\eclipse-workspace\\unicCBT\\backend\\frontend\\src\\Objective.js":"4","C:\\Users\\admin\\eclipse-workspace\\unicCBT\\backend\\frontend\\src\\reportWebVitals.js":"5","C:\\Users\\admin\\eclipse-workspace\\unicCBT\\backend\\frontend\\src\\buttonsGroup\\buttonsGroup.js":"6"},{"size":25254,"mtime":1624271662393,"results":"7","hashOfConfig":"8"},{"size":1230,"mtime":1624271662392,"results":"9","hashOfConfig":"8"},{"size":16610,"mtime":1624270225415,"results":"10","hashOfConfig":"8"},{"size":6490,"mtime":1624270225414,"results":"11","hashOfConfig":"8"},{"size":375,"mtime":1624270225425,"results":"12","hashOfConfig":"8"},{"size":11431,"mtime":1624270225417,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16","usedDeprecatedRules":"17"},"dpwatf",{"filePath":"18","messages":"19","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\admin\\eclipse-workspace\\unicCBT\\backend\\frontend\\src\\Test.js",["28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54"],"import React, { useState, useEffect } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Card from '@material-ui/core/Card';\r\nimport Button from '@material-ui/core/Button';\r\nimport classNames from 'classnames';\r\n// import { makeStyles } from '@material-ui/core/styles';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Brightness1Icon from '@material-ui/icons/Brightness1';\r\nimport Questions from './Questions';\r\nimport Objective from './Objective';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport ButtonsGroup from './buttonsGroup/buttonsGroup';\r\nimport SwipeableViews from 'react-swipeable-views';\r\nimport MobileStepper from '@material-ui/core/MobileStepper';\r\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\r\nimport axios from 'axios';\r\nimport { useHistory, Prompt } from 'react-router-dom';\r\nconst useStyles = theme => ({\r\n    root: {\r\n        flexGrow: 1\r\n    },\r\n    header: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        height: 50,\r\n        width: '100%',\r\n        paddingLeft: theme.spacing.unit * 5,\r\n        marginBottom: 20,\r\n        marginTop: 77,\r\n        backgroundColor: theme.palette.background.default,\r\n    },\r\n    leftContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'column'\r\n    },\r\n    mobileStepper: {\r\n        paddingLeft: theme.spacing.unit * 3,\r\n        paddingRight: theme.spacing.unit * 3\r\n    },\r\n\r\n    card: {\r\n        margin: '10px',\r\n        // backgroundColor: 'rgb(0,0,0,0.2)',\r\n    },\r\n    container: {\r\n        overflow: 'auto'\r\n    },\r\n    appbar: {\r\n        alignItems: 'center'\r\n    },\r\n    mobileStepper: {\r\n        paddingLeft: theme.spacing.unit * 3,\r\n        paddingRight: theme.spacing.unit * 3\r\n    },\r\n\r\n    buttonDefault: {\r\n        margin: '12px',\r\n        borderRadius: '50%',\r\n        padding: '14px 0px',\r\n        backgroundColor: '#fff',\r\n        color: 'black',\r\n        \"&:hover\": {\r\n            backgroundColor: '#ccc',\r\n        }\r\n    },\r\n    answeredColor: {\r\n        // margin: '12px',\r\n        borderRadius: '50%',\r\n        padding: '14px 0px',\r\n        backgroundColor: 'green',\r\n        color: '#fff',\r\n        \"&:hover\": {\r\n            backgroundColor: '#8bb58b',\r\n        }\r\n    },\r\n\r\n    reviewColor: {\r\n        margin: '12px',\r\n        borderRadius: '50%',\r\n        padding: '14px 0px',\r\n        backgroundColor: 'red',\r\n        color: '#fff',\r\n        \"&:hover\": {\r\n            backgroundColor: 'red',\r\n        }\r\n    },\r\n    buttonContainer: {\r\n        display: 'flex',\r\n        width: 'calc(100% - 17%)',\r\n        flexDirection: 'row',\r\n        flexWrap: 'wrap',\r\n        marginLeft: '44px',\r\n        maxHeight: '600px',\r\n        overflowY: 'scroll',\r\n        boxShadow: '0px 4px 13px -1px rgba(0,0,0,0.2), 0px 1px 10px 0px rgba(0,0,0,0.14), 0px 1px 20px 0px rgba(0,0,0,0.19)',\r\n        borderRadius: '4px',\r\n        border: '2px solid  rgba(0,0,0,0.2)',\r\n        padding: '11px',\r\n        \"& button\": {\r\n            margin: '5px',\r\n\r\n            minWidth: '50px'\r\n        }\r\n    },\r\n    legendContainer: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        width: '96%',\r\n        marginTop: 76,\r\n        marginLeft: 19,\r\n        boxShadow: '0px 4px 13px -1px rgb(0 0 0 / 20%), 0px 1px 10px 0px rgb(0 0 0 / 14%), 0px 1px 20px 0px rgb(0 0 0 / 19%)'\r\n    },\r\n    legends: {\r\n        alignItems: 'center',\r\n        display: 'flex',\r\n        height: '40px',\r\n        boxShadow: '0px 4px 13px -1px rgba(0,0,0,0.2), 0px 1px 10px 0px rgba(0,0,0,0.14), 0px 1px 20px 0px rgba(0,0,0,0.19)',\r\n        borderRadius: '7px',\r\n        margin: '4px'\r\n\r\n    },\r\n    swipableViews: {\r\n        position: 'relative',\r\n        width: '100%'\r\n    }\r\n});\r\n\r\nfunction Test(props) {\r\n    // const classes = useStyles();\r\n    const [activeStep, setactiveStep] = useState(0);\r\n    const [finalData, setfinalData] = useState([]);\r\n    // const [questionresponse, setQuestionResponse] = useState({\r\n    //     registrationNo: 0,\r\n    //     \"resp\": [{\r\n    //         id: { registrationNo: \"\", questionId: \"\", yearOfExam: \"\" }\r\n    //     }\r\n    //     ],\r\n    //     selectedAnswer: \"\"\r\n    // })\r\n    // console.log(\"finalData\", finalData)\r\n    const maxSteps = Questions.length;\r\n    const { classes, theme } = props;\r\n    let quesNo = '';\r\n\r\n    const [question, setquestion] = useState(0);\r\n    const [questionList, setquestionList] = useState([]);\r\n    const [resetData, setResetData] = useState([]);\r\n    const history = useHistory();\r\n    const [questionNo, setquestionNo] = useState({ id: '', type: 'unanswered' });\r\n    useEffect(() => {\r\n        let keys = {};\r\n        axios.get('/student/getQuestions/1').then(res => {\r\n            setquestionList(res.data.questionList.Questions);\r\n            populateResultSet(res.data.questionList.Questions);\r\n        });\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        window.onbeforeunload = (event) => {\r\n            const e = event || window.event;\r\n            // Cancel the event\r\n            var msg = '';\r\n            e = e || window.event;\r\n            e.preventDefault();\r\n            if (e) {\r\n                e.returnValue = msg; // Legacy method for cross browser support\r\n            }\r\n            return msg; // Legacy method for cross browser support\r\n            // return \"Are you sure you want to navigate away?\";\r\n        };\r\n\r\n        // document.addEventListener('keydown', (e) => {\r\n        //     console.log(e.which);\r\n        //     // if (e.which === 91 || e.key === \"Tab\")\r\n        //     keys[e.which] = true;\r\n        //     e.preventDefault();\r\n\r\n        // });\r\n\r\n\r\n        // document.addEventListener('contextmenu', (e) => {\r\n        //     console.log(e.which);\r\n\r\n        //     e.preventDefault();\r\n        // });\r\n    }, []);\r\n\r\n\r\n    // useEffect(() => {\r\n    //     const unblock = history.block((location, action) => {\r\n    //         // if (checkBlockingCondition) {\r\n    //         alert(\"called\");\r\n    //         return window.confirm(\"Navigate Back?\");\r\n    //         // }\r\n    //         // return true;\r\n    //     });\r\n    //     return () => {\r\n    //         unblock();\r\n    //     }\r\n    // }, [])\r\n\r\n    useEffect(() => {\r\n        const unblock = history.block((location, action) => {\r\n\r\n            return window.confirm(\"Navigate Back?\");\r\n\r\n            // return true;\r\n        });\r\n\r\n        return () => {\r\n            unblock();\r\n        };\r\n    }, [])\r\n\r\n\r\n    const populateResultSet = (dataSet) => {\r\n\r\n        let resultSet = [];\r\n        let resetSet = [];\r\n        let resultSetObj = { \"registrationNo\": 2, resp: [] };\r\n        for (let i = 0; i < dataSet.length; i++) {\r\n            // resultSet.push({\r\n            //     \"registrationNo\": 2,\r\n            //     \"resp\": [\r\n            //         {\r\n            //             \"id\": {\r\n            //                 \"registrationNo\": 2,\r\n            //                 \"questionId\": dataSet[i]['questionID'],\r\n            //                 \"yearOfExam\": 2020\r\n            //             },\r\n            //             \"selectedAnswer\": \"\"\r\n            //         }\r\n            //     ]\r\n            // });\r\n\r\n            // resultSetObj\r\n            resetSet.push({ [i]: false });\r\n        }\r\n        setResetData([...resetSet]);\r\n        // setfinalData([...resultSet]);\r\n    }\r\n    const saveQuestion = (e) => {\r\n        console.log(e);\r\n        console.log(\"quesNo\", quesNo);\r\n        // if (e == \"save\")\r\n        //     setquestionNo({ id: 1, type: 'answered' });\r\n        // else {\r\n        //     if (JSON.parse(localStorage.getItem('questionNo')) === null)\r\n        //         setquestionNo({ id: 1, type: 'reviewU' });\r\n        //     else\r\n        //         setquestionNo({ id: 1, type: 'reviewA' });\r\n        // }\r\n\r\n        if (JSON.parse(localStorage.getItem('questionNo')) === null) {\r\n            if (e == \"save\") {\r\n                setquestionNo({ id: 1, type: 'unanswered' });\r\n            } else {\r\n                setquestionNo({ id: 1, type: 'reviewU' });\r\n            }\r\n        } else {\r\n            if (e == \"save\") {\r\n                setquestionNo({ id: 1, type: 'answered' });\r\n            } else {\r\n                setquestionNo({ id: 1, type: 'reviewA' });\r\n            }\r\n\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    const submitAnswers = () => {\r\n        // for(let i = 1 ; i < questionList.length;i++){\r\n        //     if(finalData() questionList[i])\r\n        // }\r\n        console.log(JSON.stringify(finalData));\r\n        let obj = { registrationNo: 2, resp: finalData };\r\n        axios.put('/student/submitExam', obj).then(res => {\r\n            console.log(\"res\", res);\r\n        })\r\n        console.log(\"obj\", obj);\r\n    }\r\n\r\n    const reviewQuestion = () => {\r\n        let reviewquestions;\r\n        if ((JSON.parse(localStorage.getItem('reviewQuestionNo'))) === null) {\r\n\r\n            localStorage.setItem('reviewQuestionNo', JSON.stringify({ 'reviewU': [], 'reviewA': [] }));\r\n        }\r\n        reviewquestions = JSON.parse(localStorage.getItem('reviewQuestionNo'));\r\n\r\n        console.log(\"activeStep\", activeStep)\r\n        let activeQues = activeStep + 1;\r\n        let questions = JSON.parse(localStorage.getItem('questionNo'));\r\n        console.log(\"reviewquestions\", reviewquestions);\r\n        if (questions && questions.indexOf(activeQues) > -1) {\r\n            // if (JSON.parse(localStorage.getItem('questionNo')) === question) {\r\n            if (reviewquestions && reviewquestions['reviewA'].indexOf(activeQues) == -1) {\r\n\r\n                reviewquestions['reviewA'].push(activeQues);\r\n                if (reviewquestions['reviewU'].indexOf(activeQues) > -1) {\r\n                    reviewquestions['reviewU'].splice(reviewquestions['reviewU'].indexOf(activeQues), 1);\r\n                }\r\n            }\r\n\r\n\r\n            setquestionNo({ id: activeQues, type: 'reviewA' });\r\n        } else {\r\n            if (reviewquestions && reviewquestions['reviewU'].indexOf(activeQues) == -1) {\r\n                reviewquestions['reviewU'].push(activeQues);\r\n                if (reviewquestions['reviewA'].indexOf(activeQues) > -1) {\r\n                    reviewquestions['reviewA'].splice(reviewquestions['reviewA'].indexOf(activeQues), 1);\r\n                }\r\n            }\r\n\r\n\r\n            setquestionNo({ id: activeQues, type: 'reviewU' });\r\n        }\r\n        localStorage.setItem('reviewQuestionNo', JSON.stringify(reviewquestions));\r\n        setactiveStep(activeStep + 1);\r\n    }\r\n\r\n    const changeActiveStep = (key) => {\r\n        console.log(\"key\", key);\r\n        setactiveStep(key)\r\n    }\r\n\r\n\r\n    const handleNext = () => {\r\n        console.log(\"question\", question);\r\n        console.log(\"finalData\", finalData)\r\n        let activeQues = activeStep + 1;\r\n        let questions = JSON.parse(localStorage.getItem('questionNo'));\r\n        if (questions && questions.indexOf(activeQues) > -1) {\r\n            setquestionNo({ id: activeQues, type: 'answered' });\r\n        }\r\n\r\n        //     if (e == \"save\") {\r\n        //         setquestionNo({ id: question, type: 'unanswered' });\r\n        //     } else {\r\n        //         setquestionNo({ id: question, type: 'reviewU' });\r\n        //     }\r\n        // } else {\r\n        //     if (e == \"save\") {\r\n        //         setquestionNo({ id: question, type: 'answered' });\r\n        //     } else {\r\n        //         setquestionNo({ id: question, type: 'reviewA' });\r\n        //     }\r\n\r\n        // }\r\n\r\n\r\n        setactiveStep(activeStep + 1);\r\n        // saveQuestion('save');\r\n    };\r\n\r\n    const handleBack = () => {\r\n        setactiveStep(activeStep - 1);\r\n    };\r\n\r\n\r\n    const handleStepChange = activeStep => {\r\n        setactiveStep(activeStep);\r\n    };\r\n\r\n    const resetQuestion = () => {\r\n        // setIsResetFlag(true);\r\n    }\r\n\r\n\r\n\r\n    const response = (event) => {\r\n        let index = -1;\r\n        let newAns = [];\r\n        if (event.isradio) {\r\n            let resData = [...finalData];\r\n\r\n\r\n\r\n            for (let i = 0; i < resData.length; i++) {\r\n                if (finalData[i]['id']['questionId'] == event.id) {\r\n                    // isUpdate = true;\r\n                    index = i;\r\n                    break;\r\n                }\r\n            }\r\n            newAns.push(event.option);\r\n            let option = newAns[0].trim();\r\n            if (index === -1) {\r\n                let obj = {\r\n                    \"id\": {\r\n                        registrationNo: 2,\r\n                        questionId: event.id,\r\n                        yearOfExam: 2020\r\n                    },\r\n                    selectedAnswer: option\r\n                }\r\n                resData = [...resData, obj];\r\n            } else {\r\n                resData[index].selectedAnswer = option;\r\n            }\r\n\r\n            //  if radio is checked\r\n\r\n            setfinalData(resData);\r\n        } else {\r\n            //  if checkbox is checked\r\n            let resData = [...finalData];\r\n            for (let i = 0; i < resData.length; i++) {\r\n                if (finalData[i]['id']['questionId'] == event.id) {\r\n                    // isUpdate = true;\r\n                    index = i;\r\n                    break;\r\n                }\r\n            }\r\n            if (index === -1) {\r\n                newAns.push(event.name);\r\n                let option = newAns[0].trim();\r\n                let obj = {\r\n                    \"id\": {\r\n                        registrationNo: 2,\r\n                        questionId: event.id,\r\n                        yearOfExam: 2020\r\n                    },\r\n                    selectedAnswer: option\r\n                }\r\n                resData = [...resData, obj];\r\n                setfinalData(resData);\r\n            } else {\r\n                let selectedOptionObj = resData[index];\r\n                let isElemPresent = false;\r\n                let prevAns = selectedOptionObj['selectedAnswer'];\r\n                // if (prevAns === \"\") {\r\n                //     newAns.push(event.name);\r\n                // } else {\r\n                newAns = prevAns === \"\" ? [] : prevAns.split(\",\");\r\n                // }\r\n                // if (newAns.length === 0) {\r\n                //     newAns.push(event.name);\r\n                // } else {\r\n                for (let i = 0; i < newAns.length; i++) {\r\n                    if (newAns[i].trim() == event.name.trim()) {\r\n                        isElemPresent = true;\r\n                        // if checked flag is turn to false\r\n                        if (event.isChecked === false) {\r\n                            newAns.splice(i, 1);\r\n                            i--;\r\n                        }\r\n                    }\r\n                }\r\n                if (!isElemPresent) {\r\n                    // if checked flag is turned to true\r\n                    newAns.push(event.name);\r\n                }\r\n                if (newAns.length === 0) {\r\n                    resData[index].selectedAnswer = \"\";\r\n                } else {\r\n                    // let obj = {\r\n                    //     \"id\": {\r\n                    //         registrationNo: 2,\r\n                    //         questionId: event.id,\r\n                    //         yearOfExam: 2020\r\n                    //     },\r\n                    //     selectedAnswer: (newAns.join(\",\"))\r\n                    // }\r\n                    resData[index].selectedAnswer = (newAns.join(\",\"));\r\n                    // resData = [...resData];\r\n                }\r\n\r\n\r\n                setfinalData(resData);\r\n                // }\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    const response1 = (event) => {\r\n        let isUpdate = false;\r\n        let index = 0;\r\n        var obj1 = {};\r\n        console.log(\"quesNo*******\", event);\r\n        console.log(\"finalData\", finalData);\r\n        // let obj = { \"name\": event };\r\n\r\n\r\n        for (let i = 0; i < finalData.length; i++) {\r\n            if (finalData[i]['resp'][0]['id']['questionId'] == event.id) {\r\n                // isUpdate = true;\r\n                index = i;\r\n                break;\r\n            }\r\n        }\r\n\r\n\r\n        if (event.isradio) {\r\n\r\n            const updatedFinalData = [...finalData];\r\n            let selectedOptionObj = updatedFinalData[index];\r\n            let prevAns = (selectedOptionObj && selectedOptionObj['resp'][0]['selectedAnswer']);\r\n            let newAns = [];\r\n            //  if radio is checked\r\n            newAns.push(event.option);\r\n            let option = newAns[0].trim();\r\n            // for (let i = 0; i < finalData.length; i++) {\r\n            //     if (finalData[i]['resp'][0]['id']['questionId'] == event.id) {\r\n            //         // isUpdate = true;\r\n            //         index = i;\r\n            //         break;\r\n            //     }\r\n            // }\r\n\r\n\r\n            obj1 = {\r\n                \"registrationNo\": 2,\r\n                \"resp\": [\r\n                    {\r\n                        \"id\": {\r\n                            \"registrationNo\": 2,\r\n                            \"questionId\": event.id,\r\n                            \"yearOfExam\": 2020\r\n                        },\r\n                        \"selectedAnswer\": option\r\n                    }\r\n                ]\r\n            };\r\n            updatedFinalData[index] = obj1;\r\n            setfinalData(updatedFinalData);\r\n\r\n        } else {\r\n            const updatedFinalData = [...finalData];\r\n            let selectedOptionObj = updatedFinalData[index];\r\n            let isElemPresent = false;\r\n            let newAns = [];\r\n            let prevAns = selectedOptionObj['resp'][0]['selectedAnswer'];\r\n            if (prevAns === \"\") {\r\n                newAns.push(event.name);\r\n            } else {\r\n                newAns = (prevAns === \"\" ? [] : prevAns.split(\",\"));\r\n            }\r\n\r\n            if (newAns.length === 0) {\r\n                newAns.push(event.name);\r\n            } else {\r\n                for (let i = 0; i < newAns.length; i++) {\r\n                    if (newAns[i].trim() == event.name.trim()) {\r\n                        isElemPresent = true;\r\n                        // if checked flag is turn to false\r\n                        if (event.isChecked === false) {\r\n                            newAns.splice(i, 1);\r\n                            i--;\r\n                        }\r\n                    }\r\n                }\r\n                if (!isElemPresent) {\r\n                    // if checked flag is turned to true\r\n                    newAns.push(event.name);\r\n                }\r\n            }\r\n\r\n\r\n\r\n            obj1 = {\r\n                \"registrationNo\": 2,\r\n                \"resp\": [\r\n                    {\r\n                        \"id\": {\r\n                            \"registrationNo\": 2,\r\n                            \"questionId\": event.id,\r\n                            \"yearOfExam\": 2020\r\n                        },\r\n                        \"selectedAnswer\": (newAns.join(\",\"))\r\n                    }\r\n                ]\r\n\r\n            };\r\n            updatedFinalData[index] = obj1;\r\n            setfinalData(updatedFinalData);\r\n        }\r\n\r\n\r\n\r\n\r\n        // if (!isUpdate) {\r\n        //     setfinalData([...finalData, obj1]);\r\n        // } else {\r\n\r\n\r\n\r\n\r\n\r\n        // }\r\n\r\n        // arr\r\n        // quesNo = quesNo;\r\n        // quesNo = quesNo;\r\n        // setquestion(quesNo);\r\n        //localStorage.setItem('questionNo', JSON.stringify(quesNo));\r\n        //setquestionNo({ id: quesNo, type: 'answered' });\r\n        // setquestionNo(quesNo);\r\n        // quesNo = String(quesNo);\r\n        // const questionNo = JSON.parse(localStorage.getItem('questionNo'));\r\n        // const result = questionNo.includes(quesNo);\r\n\r\n        // if (result === false) {\r\n        //     localStorage.setItem('questionNo', JSON.stringify(questionNo.concat(quesNo)));\r\n        // }\r\n\r\n        // const questionNos = JSON.parse(localStorage.getItem('questionNo'));\r\n        // localStorage.setItem('candidateScore', String(questionNos.length));\r\n    };\r\n\r\n\r\n    const checkQuestionNo = (quesNo) => {\r\n        console.log(\"quesNo\", quesNo);\r\n        // localStorage.setItem('questionNo', JSON.stringify(quesNo));\r\n        quesNo = quesNo;\r\n        setquestion(quesNo);\r\n        //setquestionNo({ id: quesNo, type: 'answered' });\r\n        // setquestionNo(quesNo);\r\n        // quesNo = String(quesNo);\r\n        // const questionNo = JSON.parse(localStorage.getItem('questionNo'));\r\n        // const result = questionNo.includes(quesNo);\r\n\r\n        // if (result === true) {\r\n        //     const questionNos = questionNo.filter((questionNumber) => {\r\n        //         return questionNumber !== quesNo;\r\n        //     });\r\n\r\n        //     localStorage.setItem('questionNo', JSON.stringify(questionNos));\r\n        //     localStorage.setItem('candidateScore', String(questionNos.length));\r\n        // }\r\n    }\r\n    return (\r\n        <>\r\n\r\n            <Grid container className={classes.container}>\r\n                <Grid container xs={12} md={8} lg={9} className={classes.leftContainer}>\r\n                    <Paper square elevation={0} className={classes.header}>\r\n                        <Typography>{questionList && questionList[activeStep] && questionList[activeStep].questionID} {questionList && questionList[activeStep] && questionList[activeStep].question}</Typography>\r\n                    </Paper>\r\n\r\n                    {/* {Questions.map(question => ( */}\r\n\r\n                    <div className={classes.swipableViews}>\r\n                        <SwipeableViews\r\n                            axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\r\n                            index={activeStep}\r\n                            onChangeIndex={handleStepChange}\r\n                            enableMouseEvents\r\n                        >\r\n                            {/* <Objective\r\n                            objective={Questions[1].obj}\r\n                            key={Questions[1].id}\r\n                            response={(quesNo) => response(quesNo)}\r\n                            checkQuestionNo={(quesNo) => checkQuestionNo(quesNo)} /> */}\r\n                            {/* {console.log(questionList)} */}\r\n                            {questionList && questionList.map(question => (\r\n                                <Objective\r\n                                    isReset={resetData}\r\n                                    objective={question}\r\n                                    key={question.questionID}\r\n                                    response={(event) => response(event)}\r\n                                    checkQuestionNo={(quesNo) => checkQuestionNo(quesNo)} />\r\n                            ))}\r\n\r\n                        </SwipeableViews>\r\n                    </div>\r\n\r\n                    {/* ))} */}\r\n                    {/* <MobileStepper\r\n                        steps={maxSteps}\r\n                        position=\"static\"\r\n                        variant=\"progress\"\r\n                        activeStep={activeStep}\r\n                        className={classes.mobileStepper}\r\n                        nextButton={\r\n                            <Button size=\"small\" onClick={handleNext} disabled={activeStep === maxSteps - 1}>\r\n                                Save & Next\r\n              {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\r\n                            </Button>\r\n                        }\r\n                        backButton={\r\n                            <Button size=\"small\" onClick={handleBack} disabled={activeStep === 0}>\r\n                                {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\r\n                  Back\r\n            </Button>\r\n\r\n                        }\r\n                    /> */}\r\n                    <div>\r\n\r\n                        <Button size=\"small\" onClick={handleBack} disabled={activeStep === 0}>\r\n\r\n                            Back\r\n                    </Button>\r\n                        <Button size=\"small\" onClick={reviewQuestion} >\r\n\r\n                            Review\r\n                        </Button>\r\n\r\n                        <Button size=\"small\" onClick={resetQuestion} >\r\n\r\n                            Reset\r\n                        </Button>\r\n\r\n                        <Button size=\"small\" onClick={submitAnswers} >\r\n\r\n                            Submit\r\n                        </Button>\r\n\r\n                        <Button size=\"small\" onClick={handleNext} disabled={activeStep === maxSteps - 1}>\r\n\r\n                            Next\r\n                    </Button>\r\n                    </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                    {/* <Button onClick={() => { saveQuestion('save') }} value=\"save\" variant=\"contained\">Save & Next</Button>\r\n                    <Button onClick={() => { saveQuestion('review') }} onClick={saveQuestion} variant=\"contained\" color=\"primary\">\r\n                        Review\r\n                    </Button> */}\r\n                </Grid>\r\n                <Grid item xs={12} md={4} lg={3}>\r\n\r\n                    <ButtonsGroup arrLen={questionList} questionInfo={questionNo} totalQues={questionList.length} changeStep={changeActiveStep} />\r\n\r\n\r\n                </Grid>\r\n            </Grid>\r\n\r\n        </>\r\n    )\r\n}\r\nexport default withStyles(useStyles, { withTheme: true })(Test);\r\n// export default Test\r\n",["55","56"],"C:\\Users\\admin\\eclipse-workspace\\unicCBT\\backend\\frontend\\src\\App.js",["57","58","59","60"],"C:\\Users\\admin\\eclipse-workspace\\unicCBT\\backend\\frontend\\src\\Questions.js",[],"C:\\Users\\admin\\eclipse-workspace\\unicCBT\\backend\\frontend\\src\\Objective.js",["61"],"C:\\Users\\admin\\eclipse-workspace\\unicCBT\\backend\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\admin\\eclipse-workspace\\unicCBT\\backend\\frontend\\src\\buttonsGroup\\buttonsGroup.js",["62","63","64","65","66","67","68","69","70","71","72","73","74"],{"ruleId":"75","severity":1,"message":"76","line":3,"column":8,"nodeType":"77","messageId":"78","endLine":3,"endColumn":12},{"ruleId":"75","severity":1,"message":"79","line":5,"column":8,"nodeType":"77","messageId":"78","endLine":5,"endColumn":18},{"ruleId":"75","severity":1,"message":"80","line":8,"column":8,"nodeType":"77","messageId":"78","endLine":8,"endColumn":23},{"ruleId":"75","severity":1,"message":"81","line":15,"column":8,"nodeType":"77","messageId":"78","endLine":15,"endColumn":21},{"ruleId":"75","severity":1,"message":"82","line":16,"column":8,"nodeType":"77","messageId":"78","endLine":16,"endColumn":25},{"ruleId":"75","severity":1,"message":"83","line":17,"column":8,"nodeType":"77","messageId":"78","endLine":17,"endColumn":26},{"ruleId":"75","severity":1,"message":"84","line":19,"column":22,"nodeType":"77","messageId":"78","endLine":19,"endColumn":28},{"ruleId":"85","severity":1,"message":"86","line":53,"column":5,"nodeType":"87","messageId":"88","endLine":53,"endColumn":18},{"ruleId":"75","severity":1,"message":"89","line":153,"column":13,"nodeType":"77","messageId":"78","endLine":153,"endColumn":17},{"ruleId":"90","severity":1,"message":"91","line":169,"column":13,"nodeType":"77","messageId":"92","endLine":169,"endColumn":14},{"ruleId":"93","severity":1,"message":"94","line":219,"column":8,"nodeType":"95","endLine":219,"endColumn":10,"suggestions":"96"},{"ruleId":"75","severity":1,"message":"97","line":224,"column":13,"nodeType":"77","messageId":"78","endLine":224,"endColumn":22},{"ruleId":"75","severity":1,"message":"98","line":226,"column":13,"nodeType":"77","messageId":"78","endLine":226,"endColumn":25},{"ruleId":"75","severity":1,"message":"99","line":248,"column":11,"nodeType":"77","messageId":"78","endLine":248,"endColumn":23},{"ruleId":"100","severity":1,"message":"101","line":261,"column":19,"nodeType":"102","messageId":"88","endLine":261,"endColumn":21},{"ruleId":"100","severity":1,"message":"101","line":267,"column":19,"nodeType":"102","messageId":"88","endLine":267,"endColumn":21},{"ruleId":"100","severity":1,"message":"101","line":306,"column":83,"nodeType":"102","messageId":"88","endLine":306,"endColumn":85},{"ruleId":"100","severity":1,"message":"101","line":317,"column":83,"nodeType":"102","messageId":"88","endLine":317,"endColumn":85},{"ruleId":"100","severity":1,"message":"101","line":389,"column":54,"nodeType":"102","messageId":"88","endLine":389,"endColumn":56},{"ruleId":"100","severity":1,"message":"101","line":418,"column":54,"nodeType":"102","messageId":"88","endLine":418,"endColumn":56},{"ruleId":"100","severity":1,"message":"101","line":450,"column":42,"nodeType":"102","messageId":"88","endLine":450,"endColumn":44},{"ruleId":"75","severity":1,"message":"103","line":488,"column":11,"nodeType":"77","messageId":"78","endLine":488,"endColumn":20},{"ruleId":"75","severity":1,"message":"104","line":489,"column":13,"nodeType":"77","messageId":"78","endLine":489,"endColumn":21},{"ruleId":"100","severity":1,"message":"101","line":498,"column":61,"nodeType":"102","messageId":"88","endLine":498,"endColumn":63},{"ruleId":"75","severity":1,"message":"105","line":510,"column":17,"nodeType":"77","messageId":"78","endLine":510,"endColumn":24},{"ruleId":"100","severity":1,"message":"101","line":556,"column":42,"nodeType":"102","messageId":"88","endLine":556,"endColumn":44},{"ruleId":"106","severity":1,"message":"107","line":627,"column":18,"nodeType":"77","messageId":"108","endLine":627,"endColumn":24},{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","replacedBy":"112"},{"ruleId":"75","severity":1,"message":"113","line":1,"column":8,"nodeType":"77","messageId":"78","endLine":1,"endColumn":12},{"ruleId":"75","severity":1,"message":"114","line":5,"column":8,"nodeType":"77","messageId":"78","endLine":5,"endColumn":20},{"ruleId":"75","severity":1,"message":"115","line":9,"column":8,"nodeType":"77","messageId":"78","endLine":9,"endColumn":17},{"ruleId":"75","severity":1,"message":"84","line":10,"column":10,"nodeType":"77","messageId":"78","endLine":10,"endColumn":16},{"ruleId":"75","severity":1,"message":"116","line":82,"column":17,"nodeType":"77","messageId":"78","endLine":82,"endColumn":20},{"ruleId":"75","severity":1,"message":"117","line":2,"column":8,"nodeType":"77","messageId":"78","endLine":2,"endColumn":12},{"ruleId":"75","severity":1,"message":"76","line":3,"column":8,"nodeType":"77","messageId":"78","endLine":3,"endColumn":12},{"ruleId":"75","severity":1,"message":"80","line":7,"column":8,"nodeType":"77","messageId":"78","endLine":7,"endColumn":23},{"ruleId":"75","severity":1,"message":"118","line":9,"column":8,"nodeType":"77","messageId":"78","endLine":9,"endColumn":18},{"ruleId":"75","severity":1,"message":"119","line":10,"column":8,"nodeType":"77","messageId":"78","endLine":10,"endColumn":13},{"ruleId":"100","severity":1,"message":"101","line":159,"column":29,"nodeType":"102","messageId":"88","endLine":159,"endColumn":31},{"ruleId":"93","severity":1,"message":"120","line":182,"column":8,"nodeType":"95","endLine":182,"endColumn":16,"suggestions":"121"},{"ruleId":"75","severity":1,"message":"116","line":187,"column":13,"nodeType":"77","messageId":"78","endLine":187,"endColumn":16},{"ruleId":"100","severity":1,"message":"101","line":204,"column":29,"nodeType":"102","messageId":"88","endLine":204,"endColumn":31},{"ruleId":"75","severity":1,"message":"122","line":222,"column":12,"nodeType":"77","messageId":"78","endLine":222,"endColumn":23},{"ruleId":"75","severity":1,"message":"123","line":244,"column":12,"nodeType":"77","messageId":"78","endLine":244,"endColumn":27},{"ruleId":"75","severity":1,"message":"124","line":244,"column":29,"nodeType":"77","messageId":"78","endLine":244,"endColumn":47},{"ruleId":"75","severity":1,"message":"125","line":251,"column":11,"nodeType":"77","messageId":"78","endLine":251,"endColumn":18},"no-unused-vars","'Card' is defined but never used.","Identifier","unusedVar","'classNames' is defined but never used.","'Brightness1Icon' is defined but never used.","'MobileStepper' is defined but never used.","'KeyboardArrowLeft' is defined but never used.","'KeyboardArrowRight' is defined but never used.","'Prompt' is defined but never used.","no-dupe-keys","Duplicate key 'mobileStepper'.","ObjectExpression","unexpected","'keys' is assigned a value but never used.","no-const-assign","'e' is constant.","const","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["126"],"'resultSet' is assigned a value but never used.","'resultSetObj' is assigned a value but never used.","'saveQuestion' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'response1' is assigned a value but never used.","'isUpdate' is assigned a value but never used.","'prevAns' is assigned a value but never used.","no-self-assign","'quesNo' is assigned to itself.","selfAssignment","no-native-reassign",["127"],"no-negated-in-lhs",["128"],"'logo' is defined but never used.","'Instructions' is defined but never used.","'NewWindow' is defined but never used.","'obj' is assigned a value but never used.","'Grid' is defined but never used.","'Typography' is defined but never used.","'Paper' is defined but never used.","React Hook useEffect has missing dependencies: 'newArr' and 'questionInfo'. Either include them or remove the dependency array.",["129"],"'itemClicked' is assigned a value but never used.","'isAnsweredColor' is assigned a value but never used.","'setisAnsweredColor' is assigned a value but never used.","'clicked' is assigned a value but never used.",{"desc":"130","fix":"131"},"no-global-assign","no-unsafe-negation",{"desc":"132","fix":"133"},"Update the dependencies array to be: [history]",{"range":"134","text":"135"},"Update the dependencies array to be: [arrLen, newArr, questionInfo]",{"range":"136","text":"137"},[6509,6511],"[history]",[5295,5303],"[arrLen, newArr, questionInfo]"]